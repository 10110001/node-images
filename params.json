{"name":"Node-images","tagline":"Cross-platform image decoder(png/jpeg/gif) and encoder(png/jpeg) for Nodejs","body":"![images logo](https://raw.github.com/zhangyuanwei/node-images/master/demo/logo.png)\r\n===========\r\n\r\nCross-platform image decoder(png/jpeg/gif) and encoder(png/jpeg) for Node.js  \r\nNode.js轻量级跨平台图像编解码库\r\n\r\n``` javascript\r\nvar images = require(\"images\");\r\n\r\nimages(\"input.jpg\")                     //Load image from file \r\n                                        //加载图像文件\r\n    .size(400)                          //Geometric scaling the image to 400 pixels width\r\n                                        //等比缩放图像到400像素宽\r\n    .draw(images(\"logo.png\"), 10, 10)   //Drawn logo at coordinates (10,10)\r\n                                        //在(10,10)处绘制Logo\r\n    .save(\"output.jpg\", {               //Save the image to a file,whih quality 50\r\n        quality : 50                    //保存图片到文件,图片质量为50\r\n\t});\r\n```\r\n## Features 功能特性\r\n\r\n* Lightweight:no need to install any image processing library.\r\n* 轻量级：无需安装任何图像处理库。\r\n* Cross-platform: Released a compiled .node file on windows, just download and start.\r\n* 跨平台：Windows下发布了编译好的.node文件,下载就能用。\r\n* Easy-to-use: Provide jQuery-like chaining API.Simple and reliable!\r\n* 方便用：jQuery风格的API，简单可依赖。\r\n\r\n## Installation 安装\r\n\t$ npm install images\r\n\r\n## API 接口\r\n\r\nnode-images provide jQuery-like Chaining API,You can start the chain like this:  \r\nnode-images 提供了类似jQuery的链式调用API,您可以这样开始:\r\n\r\n```javascript\r\n/* Load and decode image from file */\r\n/* 从指定文件加载并解码图像 */\r\nimages(file)\r\n\r\n/* Create a new transparent image */\r\n/* 创建一个指定宽高的透明图像 */\r\nimages(width, height)\r\n\r\n/* Load and decode image from a buffer */\r\n/* 从Buffer数据中解码图像 */\r\nimages(buffer[, start[, end]])\r\n\r\n/* Copy from another image */\r\n/* 从另一个图像中复制区域来创建图像 */\r\nimages(image[, x, y, width, height])\r\n```\r\n\r\n### images(file)\r\nLoad and decode image from file  \r\n从指定文件加载并解码图像\r\n\r\n### images(width, height)\r\nCreate a new transparent image  \r\n创建一个指定宽高的透明图像\r\n\r\n### images(buffer[, start[, end]])\r\nLoad and decode image from a buffer  \r\n从Buffer数据中解码图像\r\n\r\n### images(image[, x, y, width, height])\r\nCopy from another image  \r\n从另一个图像中复制区域来创建图像\r\n\r\n### .fill(red, green, blue[, alpha])\r\neg:`images(200, 100).fill(0xff, 0x00, 0x00, 0.5)`\r\nFill image with color  \r\n以指定颜色填充图像\r\n\r\n### .draw(image, x, y)\r\nDraw *image* on the current image position( *x* , *y* )  \r\n在当前图像( *x* , *y* )上绘制 *image* 图像\r\n\r\n### .encode(type[, config])\r\neg:`images(\"input.png\").encode(\"jpg\", {operation:50})`\r\nEncode image to buffer, *config* is image setting.  \r\n以指定格式编码当前图像到Buffer，config为图片设置，目前支持设置JPG图像质量  \r\nReturn buffer  \r\n返回填充好的Buffer  \r\n**Note:The operation will cut off the chain**  \r\n**注意:该操作将会切断调用链**  \r\nSee:.save(file[, type[, config]])\r\n参考:.save(file[, type[, config]])\r\n\r\n### .save(file[, type[, config]])\r\neg:`images(\"input.png\").encode(\"output.jpg\", {operation:50})`\r\nEncoding and save the current image to a *file*, if the *type* is not specified, *type* well be automatically determined according to the *file*, *config* is image setting. eg: `{ operation:50 }`  \r\n编码并保存当前图像到 *file* ,如果type未指定,则根据 *file* 自动判断文件类型，config为图片设置，目前支持设置JPG图像质量\r\n\r\n### .size([width[, height]])\r\nGet size of the image or set the size of the image,if the height is not specified, then scaling based on the current width and height  \r\n获取或者设置图像宽高，如果height未指定，则根据当前宽高等比缩放\r\n\r\n### .width([width])\r\nGet width for the image or set width of the image  \r\n获取或设置图像宽度\r\n\r\n### .height([height])\r\nGet height for the image or set height of the image  \r\n获取或设置图像高度\r\n\r\n### images.setLimit(width, height)\r\nSet the limit size of each image  \r\n设置库处理图片的大小限制,设置后对所有新的操作生效(如果超限则抛出异常)。\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}